<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Ultramarine.Workspaces.dll" #>
<#@ assembly name="Ultramarine.Workspaces.VisualStudio.dll" #>
<#@ assembly name="NetStandard" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Ultramarine.Workspaces" #>
<#@ import namespace="Ultramarine.Workspaces.CodeElements" #>
<#@ import namespace="Ultramarine.Workspaces.VisualStudio.CodeElements" #> 
<#@parameter name="Input" type="System.Object" #>
<# 
	var taskList = Input as List<ICodeElementModel>;
#>
{
  "definitions": {
    "task": {
		"$ref": "JsonSchemas/BaseTypes/TaskSchema.json#"
    },
    "variable": {
		"$ref": "JsonSchemas/BaseTypes/VariableSchema.json#"
	}
  },
  "type": "object",
  "properties": {
    "tasks": {
      "definitions": {
        "task": {
         "$ref": "JsonSchemas/BaseTypes/TaskSchema.json#"
		 },
        "variable": {
          "$ref": "JsonSchemas/BaseTypes/VariableSchema.json#"
        }
      },
      "type": "array",
      "items": {
		"anyOf": [

<# 
foreach(CodeElementModel task in taskList) {
	var taskName = ToCamelCase(task.Name);
#>	
{
	"<#= taskName #>": {
		"$ref": "JsonSchemas/<#= task.Name #>Schema.json#"
	}
}<# if(task != taskList[taskList.Count - 1]) { #>, 
<# } #>
<# 
	} 
#>
	   ]
      }
	}    
  },
  "required": [
    "name",
    "tasks"
  ]
}

<#+ 
private static string ToCamelCase(string value) 
{
	return Char.ToLowerInvariant(value[0]) + value.Substring(1);
}

private static Dictionary<Type, string> GetAliases()
{
	return new Dictionary<Type, string>() {
		{ typeof(byte), "byte" },
		{ typeof(sbyte), "sbyte" },
		{ typeof(short), "short" },
		{ typeof(ushort), "ushort" },
		{ typeof(int), "int" },
		{ typeof(uint), "uint" },
		{ typeof(long), "long" },
		{ typeof(ulong), "ulong" },
		{ typeof(float), "float" },
		{ typeof(double), "double" },
		{ typeof(decimal), "decimal" },
		{ typeof(object), "object" },
		{ typeof(bool), "bool" },
		{ typeof(char), "char" },
		{ typeof(string), "string" },
		{ typeof(void), "void" }
	};
}

private static List<string> GetPropertyDescriptor(ICodeElementModel property)
{
	Debug.WriteLine("GetPropertyDescriptor called");
	var result = new List<string>();
	Debug.WriteLine("Has Property: " + property != null); 

	if(property.Type == ElementType.Property)
    {
		Debug.WriteLine(property.TypeOf);
		foreach( var type in property.TypeOf)
        {
			try 
			{			
				var t = GetType(type);
				Debug.WriteLine(t);
				if(t.IsEnum)
				{
					Debug.WriteLine("Type is enum");
					var enums = Enum.GetNames(t);
					result.AddRange((enums).ToList());
				}
				else
				{
					result.Add(TryGetAlias(type));
				}
			}
			catch(Exception ex)
			{
				Console.WriteLine(ex.Message);
			}
		}
	}
	else
    {
		//TODO...
	}

	result.Add("null");
	return result;
}

private static string TryGetAlias(string typeName) 
{
	var aliases = GetAliases();
	var key = aliases.Keys.FirstOrDefault(c => c.FullName == typeName);
	return key != null ? aliases[key] : typeName;
}

private static Type GetType(string typeName)
{
	var regex = new Regex(@"System\.Nullable<(\S*)>");
	var safeTypeName = typeName;
	if (regex.IsMatch(typeName))
	{
		var match = regex.Match(typeName);
		safeTypeName = match.Groups[1].Value;
    }
	var type = Type.GetType(safeTypeName);
	if(type != null)
		return type;

	return AppDomain.CurrentDomain.GetAssemblies()
				.SelectMany(t => t.GetTypes())
				.Where(t => String.Equals(t.FullName, safeTypeName, StringComparison.Ordinal))
				.First();
}
#>