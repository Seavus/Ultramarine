<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="Ultramarine.Workspaces" #>
<#@ assembly name="Ultramarine.Workspaces.VisualStudio" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Ultramarine.Workspaces.CodeElements" #>
<#@ import namespace="Ultramarine.Workspaces.VisualStudio.CodeElements" #>
<#@parameter name="Input" type="System.Object" #>
<#@parameter name="Parameters" type="System.Collections.Generic.Dictionary<string, object>" #>
<# 
	var task = Input as CodeElementModel;
	var properties = task.Children.Where(c => c.Type == ElementType.Property).ToList();
	var isCompositeTask = task.TypeOf != null && task.TypeOf.Any(t => Regex.IsMatch(t, "CompositeTask"));
#>
// This file is generated by Ultramarine and should not be modified by hand
<# if(isCompositeTask) {#>
import React from 'react'
import CompositeTask from '../composite-task'

const <#= task.Name #> = props => (
  <div>
    <#= task.Name #>
    <CompositeTask {...props} />
  </div>
)

export default <#= task.Name #>
<# } else { #>
import React, { Fragment } from 'react'
import PropTypes from 'prop-types'
import Task from '../task'
import Input from '../../ui/Input'

const <#= task.Name #> = ({
<# foreach(var property in properties){ #>
  <#= ToCamelCase(property.Name) #>,
<# } #>
  editable,
  onChange,
  ...rest
}) => (
  <Task editable={editable} {...rest} icon={<#= task.Name #>.icon}>
    {editable ? (
      <Fragment>
<# foreach(var property in properties){ #>
		<Input
          id="<#= ToCamelCase(property.Name) #>"
          text="<#= SplitCamelCase(property.Name) #>"
          value={<#= ToCamelCase(property.Name) #>}
          onChange={onChange}
        />
<# } #>
        
      </Fragment>
    ) : (
      <Fragment>
<# foreach(var property in properties){ #>
		<p><#= SplitCamelCase(property.Name) #>: {<#= ToCamelCase(property.Name) #>}</p>
<# } #>
      </Fragment>
    )}
  </Task>
)

<#= task.Name #>.description = '<#= SplitCamelCase(task.Name) #>'
<#= task.Name #>.icon = 'code'
<#= task.Name #>.type = '<#= ToCamelCase(task.Name) #>'

<#= task.Name #>.propTypes = {
<# foreach(var property in properties){ #>
  <#= ToCamelCase(property.Name) #>: PropTypes.string,
<# } #>
  editable: PropTypes.bool,
  onChange: PropTypes.func
}

<#= task.Name #>.defaultProps = {
<# foreach(var property in properties){ #>
  <#= ToCamelCase(property.Name) #>: '',
<# } #>
  editable: false,
  onChange: () => {}
}

export default <#= task.Name #>
<# } #>
<#+ 
private string ToCamelCase(string value) {
	return Char.ToLowerInvariant(value[0]) + value.Substring(1);
}
private string SplitCamelCase(string value)
{
	if (value.Length > 0)
    {
		var result = new List<char>();
        char[] array = value.ToCharArray();
        foreach (var item in array)
        {
			if (char.IsUpper(item) && result.Count > 0)
            {
				result.Add(' ');
            }
			result.Add(item);
		}
		var splitted = new string(result.ToArray());
		return char.ToUpperInvariant(splitted[0]) + splitted.Substring(1);
     }
     return value;
}
#>