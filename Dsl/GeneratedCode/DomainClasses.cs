//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Ultramarine.Generators.Language
{
	/// <summary>
	/// DomainClass GeneratorModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.GeneratorModel.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ultramarine.Generators.Language.GeneratorModel.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("998d169c-4479-4c51-afb7-ac84ad68d0a9")]
	public partial class GeneratorModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// GeneratorModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x998d169c, 0x4479, 0x4c51, 0xaf, 0xb7, 0xac, 0x84, 0xad, 0x68, 0xd0, 0xa9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GeneratorModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GeneratorModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Tasks opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Tasks.
		/// Description for
		/// Ultramarine.Generators.Language.GeneratorModelHasTasks.GeneratorModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Task> Tasks
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Task>, Task>(global::Ultramarine.Generators.Language.GeneratorModelHasTasks.GeneratorModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ultramarine.Generators.Language.Task.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Ultramarine.Generators.Language.Task sourceTask1 = sourceElement as global::Ultramarine.Generators.Language.Task;
			if (sourceTask1 != null)
			{
				// Create link for path GeneratorModelHasTasks.Tasks
				this.Tasks.Add(sourceTask1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Ultramarine.Generators.Language.Task sourceTask1 = sourceElement as global::Ultramarine.Generators.Language.Task;
			if (sourceTask1 != null)
			{
				// Delete link for path GeneratorModelHasTasks.Tasks
				
				foreach (DslModeling::ElementLink link in global::Ultramarine.Generators.Language.GeneratorModelHasTasks.GetLinks((global::Ultramarine.Generators.Language.GeneratorModel)this, sourceTask1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ultramarine.Generators.Language.GeneratorModelHasTasks.GeneratorModelDomainRoleId, global::Ultramarine.Generators.Language.GeneratorModelHasTasks.TaskDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Ultramarine.Generators.Language
{
	/// <summary>
	/// DomainClass Task
	/// Description for Ultramarine.Generators.Language.Task
	/// </summary>
	[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.Task.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ultramarine.Generators.Language.Task.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("eb42e64f-0ae3-4a9b-9435-7bc6dee5d967")]
	public abstract partial class Task : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Task domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeb42e64f, 0x0ae3, 0x4a9b, 0x94, 0x35, 0x7b, 0xc6, 0xde, 0xe5, 0xd9, 0x67);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Task(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x8a36f86e, 0x184d, 0x4bbe, 0xb8, 0x6b, 0x5b, 0x8f, 0x2c, 0x5d, 0xe4, 0x93);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Ultramarine.Generators.Language.Task.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.Task/Name.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.Task/Name.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("8a36f86e-184d-4bbe-b86b-5b8f2c5de493")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Task.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Task, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Task.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Task.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Task element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Task element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x2bafcdc0, 0xca91, 0x45b0, 0xad, 0x72, 0x8c, 0xdd, 0x1d, 0xc8, 0xa3, 0x5b);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for Ultramarine.Generators.Language.Task.Description
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.Task/Description.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.Task/Description.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2bafcdc0-ca91-45b0-ad72-8cdd1dc8a35b")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Task.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Task, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Task.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Task.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Task element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Task element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetTask opposite domain role accessor
		/// <summary>
		/// Gets or sets TargetTask.
		/// Description for Ultramarine.Generators.Language.ConnectedWith.ConnectedTask
		/// </summary>
		public virtual Task TargetTask
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ultramarine.Generators.Language.ConnectedWith.ConnectedTaskDomainRoleId) as Task;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ultramarine.Generators.Language.ConnectedWith.ConnectedTaskDomainRoleId, value);
			}
		}
		#endregion
		#region ConnectedTasked opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ConnectedTasked.
		/// Description for Ultramarine.Generators.Language.ConnectedWith.TargetTask
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Task> ConnectedTasked
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Task>, Task>(global::Ultramarine.Generators.Language.ConnectedWith.TargetTaskDomainRoleId);
			}
		}
		#endregion
		#region Generator opposite domain role accessor
		/// <summary>
		/// Gets or sets Generator.
		/// Description for Ultramarine.Generators.Language.GeneratorModelHasTasks.Task
		/// </summary>
		public virtual GeneratorModel Generator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ultramarine.Generators.Language.GeneratorModelHasTasks.TaskDomainRoleId) as GeneratorModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ultramarine.Generators.Language.GeneratorModelHasTasks.TaskDomainRoleId, value);
			}
		}
		#endregion
		#region CompositeTasked opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CompositeTasked.
		/// Description for
		/// Ultramarine.Generators.Language.CompositeTaskReferencesTasked.Task
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CompositeTask> CompositeTasked
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CompositeTask>, CompositeTask>(global::Ultramarine.Generators.Language.CompositeTaskReferencesTasked.TaskDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Ultramarine.Generators.Language
{
	/// <summary>
	/// DomainClass CompositeTask
	/// Description for Ultramarine.Generators.Language.CompositeTask
	/// </summary>
	[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.CompositeTask.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ultramarine.Generators.Language.CompositeTask.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("44a54f0c-0084-44e3-b7b9-1e8f0f4ef3cc")]
	public abstract partial class CompositeTask : Task
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CompositeTask domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x44a54f0c, 0x0084, 0x44e3, 0xb7, 0xb9, 0x1e, 0x8f, 0x0f, 0x4e, 0xf3, 0xcc);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CompositeTask(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Tasked opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Tasked.
		/// Description for
		/// Ultramarine.Generators.Language.CompositeTaskReferencesTasked.CompositeTask
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Task> Tasked
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Task>, Task>(global::Ultramarine.Generators.Language.CompositeTaskReferencesTasked.CompositeTaskDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Ultramarine.Generators.Language
{
	/// <summary>
	/// DomainClass LoadCodeElement
	/// Description for Ultramarine.Generators.Language.LoadCodeElement
	/// </summary>
	[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.LoadCodeElement.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ultramarine.Generators.Language.LoadCodeElement.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e88bb8c2-2e3e-4337-9b4a-ba0134771eb0")]
	public partial class LoadCodeElement : Task
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LoadCodeElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe88bb8c2, 0x2e3e, 0x4337, 0x9b, 0x4a, 0xba, 0x01, 0x34, 0x77, 0x1e, 0xb0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LoadCodeElement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LoadCodeElement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Ultramarine.Generators.Language
{
	/// <summary>
	/// DomainClass BuildProject
	/// Description for Ultramarine.Generators.Language.BuildProject
	/// </summary>
	[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.BuildProject.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ultramarine.Generators.Language.BuildProject.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c485d0c8-53cb-4700-b9cd-c3df4a47eb15")]
	public partial class BuildProject : Task
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// BuildProject domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc485d0c8, 0x53cb, 0x4700, 0xb9, 0xcd, 0xc3, 0xdf, 0x4a, 0x47, 0xeb, 0x15);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BuildProject(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BuildProject(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ProjectName domain property code
		
		/// <summary>
		/// ProjectName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProjectNameDomainPropertyId = new global::System.Guid(0x2c4ce0b6, 0xc357, 0x421c, 0xa0, 0x0d, 0xb0, 0xe3, 0xba, 0x8b, 0xec, 0x82);
		
		/// <summary>
		/// Storage for ProjectName
		/// </summary>
		private global::System.String projectNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ProjectName domain property.
		/// Description for Ultramarine.Generators.Language.BuildProject.Project Name
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.BuildProject/ProjectName.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.BuildProject/ProjectName.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2c4ce0b6-c357-421c-a00d-b0e3ba8bec82")]
		public global::System.String ProjectName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return projectNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProjectNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BuildProject.ProjectName domain property.
		/// </summary>
		internal sealed partial class ProjectNamePropertyHandler : DslModeling::DomainPropertyValueHandler<BuildProject, global::System.String>
		{
			private ProjectNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BuildProject.ProjectName domain property value handler.
			/// </summary>
			public static readonly ProjectNamePropertyHandler Instance = new ProjectNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BuildProject.ProjectName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProjectNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BuildProject element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.projectNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BuildProject element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.projectNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Configuration domain property code
		
		/// <summary>
		/// Configuration domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationDomainPropertyId = new global::System.Guid(0x6ea6184d, 0xc953, 0x4035, 0xae, 0x6b, 0x27, 0xf1, 0x4e, 0x52, 0x43, 0x14);
		
		/// <summary>
		/// Storage for Configuration
		/// </summary>
		private global::System.String configurationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Configuration domain property.
		/// Description for Ultramarine.Generators.Language.BuildProject.Configuration
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.BuildProject/Configuration.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.BuildProject/Configuration.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6ea6184d-c953-4035-ae6b-27f14e524314")]
		public global::System.String Configuration
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return configurationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConfigurationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BuildProject.Configuration domain property.
		/// </summary>
		internal sealed partial class ConfigurationPropertyHandler : DslModeling::DomainPropertyValueHandler<BuildProject, global::System.String>
		{
			private ConfigurationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BuildProject.Configuration domain property value handler.
			/// </summary>
			public static readonly ConfigurationPropertyHandler Instance = new ConfigurationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BuildProject.Configuration domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConfigurationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BuildProject element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.configurationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BuildProject element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.configurationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Ultramarine.Generators.Language
{
	/// <summary>
	/// DomainClass CreateFolder
	/// Description for Ultramarine.Generators.Language.CreateFolder
	/// </summary>
	[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.CreateFolder.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ultramarine.Generators.Language.CreateFolder.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0a8bec4c-7da8-4fae-91f5-9a87f89b38b1")]
	public partial class CreateFolder : Task
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CreateFolder domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0a8bec4c, 0x7da8, 0x4fae, 0x91, 0xf5, 0x9a, 0x87, 0xf8, 0x9b, 0x38, 0xb1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CreateFolder(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CreateFolder(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FolderPath domain property code
		
		/// <summary>
		/// FolderPath domain property Id.
		/// </summary>
		public static readonly global::System.Guid FolderPathDomainPropertyId = new global::System.Guid(0x5b7b713f, 0xa14e, 0x46f3, 0xa6, 0xee, 0x13, 0xc9, 0x15, 0xfb, 0xbc, 0xc7);
		
		/// <summary>
		/// Storage for FolderPath
		/// </summary>
		private global::System.String folderPathPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of FolderPath domain property.
		/// Description for Ultramarine.Generators.Language.CreateFolder.Folder Path
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.CreateFolder/FolderPath.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.CreateFolder/FolderPath.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5b7b713f-a14e-46f3-a6ee-13c915fbbcc7")]
		public global::System.String FolderPath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return folderPathPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FolderPathPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CreateFolder.FolderPath domain property.
		/// </summary>
		internal sealed partial class FolderPathPropertyHandler : DslModeling::DomainPropertyValueHandler<CreateFolder, global::System.String>
		{
			private FolderPathPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CreateFolder.FolderPath domain property value handler.
			/// </summary>
			public static readonly FolderPathPropertyHandler Instance = new FolderPathPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CreateFolder.FolderPath domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FolderPathDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CreateFolder element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.folderPathPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CreateFolder element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.folderPathPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BasePath domain property code
		
		/// <summary>
		/// BasePath domain property Id.
		/// </summary>
		public static readonly global::System.Guid BasePathDomainPropertyId = new global::System.Guid(0x3b4e683a, 0x8927, 0x4652, 0xaa, 0xb5, 0xee, 0x7d, 0x46, 0xd6, 0xf1, 0x32);
		
		/// <summary>
		/// Storage for BasePath
		/// </summary>
		private global::System.String basePathPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of BasePath domain property.
		/// Description for Ultramarine.Generators.Language.CreateFolder.Base Path
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.CreateFolder/BasePath.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.CreateFolder/BasePath.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3b4e683a-8927-4652-aab5-ee7d46d6f132")]
		public global::System.String BasePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return basePathPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BasePathPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CreateFolder.BasePath domain property.
		/// </summary>
		internal sealed partial class BasePathPropertyHandler : DslModeling::DomainPropertyValueHandler<CreateFolder, global::System.String>
		{
			private BasePathPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CreateFolder.BasePath domain property value handler.
			/// </summary>
			public static readonly BasePathPropertyHandler Instance = new BasePathPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CreateFolder.BasePath domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BasePathDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CreateFolder element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.basePathPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CreateFolder element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.basePathPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Setting opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Setting.
		/// Description for
		/// Ultramarine.Generators.Language.CreateFolderHasSetting.CreateFolder
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Settings> Setting
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Settings>, Settings>(global::Ultramarine.Generators.Language.CreateFolderHasSetting.CreateFolderDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ultramarine.Generators.Language.Settings.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Ultramarine.Generators.Language.Settings sourceSettings1 = sourceElement as global::Ultramarine.Generators.Language.Settings;
			if (sourceSettings1 != null)
			{
				// Create link for path CreateFolderHasSetting.Setting
				this.Setting.Add(sourceSettings1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Ultramarine.Generators.Language.Settings sourceSettings1 = sourceElement as global::Ultramarine.Generators.Language.Settings;
			if (sourceSettings1 != null)
			{
				// Delete link for path CreateFolderHasSetting.Setting
				
				foreach (DslModeling::ElementLink link in global::Ultramarine.Generators.Language.CreateFolderHasSetting.GetLinks((global::Ultramarine.Generators.Language.CreateFolder)this, sourceSettings1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ultramarine.Generators.Language.CreateFolderHasSetting.CreateFolderDomainRoleId, global::Ultramarine.Generators.Language.CreateFolderHasSetting.SettingsDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Ultramarine.Generators.Language
{
	/// <summary>
	/// DomainClass Settings
	/// Description for Ultramarine.Generators.Language.Settings
	/// </summary>
	[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.Settings.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ultramarine.Generators.Language.Settings.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("dbf0da59-5949-4c55-a59c-2a0ff2343ea2")]
	public sealed partial class Settings : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Settings domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdbf0da59, 0x5949, 0x4c55, 0xa5, 0x9c, 0x2a, 0x0f, 0xf2, 0x34, 0x3e, 0xa2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Settings(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Settings(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0xbfd881b2, 0x142f, 0x45f0, 0x8a, 0x26, 0xb0, 0x1b, 0x4a, 0xeb, 0xda, 0xc3);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.String valuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// Description for Ultramarine.Generators.Language.Settings.Value
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.Settings/Value.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.Settings/Value.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bfd881b2-142f-45f0-8a26-b01b4aebdac3")]
		public global::System.String Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Settings.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<Settings, global::System.String>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Settings.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Settings.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Settings element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.valuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Settings element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CreateFolder opposite domain role accessor
		/// <summary>
		/// Gets or sets CreateFolder.
		/// Description for Ultramarine.Generators.Language.CreateFolderHasSetting.Settings
		/// </summary>
		public CreateFolder CreateFolder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ultramarine.Generators.Language.CreateFolderHasSetting.SettingsDomainRoleId) as CreateFolder;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ultramarine.Generators.Language.CreateFolderHasSetting.SettingsDomainRoleId, value);
			}
		}
		#endregion
	}
}
