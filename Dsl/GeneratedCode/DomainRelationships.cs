//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Ultramarine.Generators.Language
{
	/// <summary>
	/// DomainRelationship ConnectedWith
	/// Description for Ultramarine.Generators.Language.ConnectedWith
	/// </summary>
	[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.ConnectedWith.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ultramarine.Generators.Language.ConnectedWith.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("190a9443-8fc2-4c0d-9f96-284b404f4f02")]
	public partial class ConnectedWith : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConnectedWith domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x190a9443, 0x8fc2, 0x4c0d, 0x9f, 0x96, 0x28, 0x4b, 0x40, 0x4f, 0x4f, 0x02);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConnectedWith link in the same Partition as the given Task
		/// </summary>
		/// <param name="source">Task to use as the source of the relationship.</param>
		/// <param name="target">Task to use as the target of the relationship.</param>
		public ConnectedWith(Task source, Task target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConnectedWith.ConnectedTaskDomainRoleId, source), new DslModeling::RoleAssignment(ConnectedWith.TargetTaskDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConnectedWith(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConnectedWith(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConnectedWith(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConnectedWith(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConnectedTask domain role code
		
		/// <summary>
		/// ConnectedTask domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConnectedTaskDomainRoleId = new global::System.Guid(0x612cd04d, 0x891f, 0x4238, 0x85, 0x3a, 0x42, 0xd3, 0x04, 0x3d, 0x29, 0x50);
		
		/// <summary>
		/// DomainRole ConnectedTask
		/// Description for Ultramarine.Generators.Language.ConnectedWith.ConnectedTask
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.ConnectedWith/ConnectedTask.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.ConnectedWith/ConnectedTask.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetTask", PropertyDisplayNameKey="Ultramarine.Generators.Language.ConnectedWith/ConnectedTask.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("612cd04d-891f-4238-853a-42d3043d2950")]
		public virtual Task ConnectedTask
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Task)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConnectedTaskDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConnectedTaskDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConnectedTasked of a Task
		/// <summary>
		/// Gets a list of ConnectedTasked.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Task> GetConnectedTasked(Task element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Task>, Task>(element, TargetTaskDomainRoleId);
		}
		#endregion
		#region TargetTask domain role code
		
		/// <summary>
		/// TargetTask domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetTaskDomainRoleId = new global::System.Guid(0xaac64dbc, 0xd054, 0x4374, 0x8d, 0x09, 0xcf, 0x14, 0x3b, 0xa2, 0x01, 0x7b);
		
		/// <summary>
		/// DomainRole TargetTask
		/// Description for Ultramarine.Generators.Language.ConnectedWith.TargetTask
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.ConnectedWith/TargetTask.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.ConnectedWith/TargetTask.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConnectedTasked", PropertyDisplayNameKey="Ultramarine.Generators.Language.ConnectedWith/TargetTask.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("aac64dbc-d054-4374-8d09-cf143ba2017b")]
		public virtual Task TargetTask
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Task)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetTaskDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetTaskDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetTask of a Task
		/// <summary>
		/// Gets TargetTask.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Task GetTargetTask(Task element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConnectedTaskDomainRoleId) as Task;
		}
		
		/// <summary>
		/// Sets TargetTask.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTargetTask(Task element, Task newTargetTask)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConnectedTaskDomainRoleId, newTargetTask);
		}
		#endregion
		#region ConnectedTask link accessor
		/// <summary>
		/// Get the ConnectedWith link to a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ultramarine.Generators.Language.ConnectedWith GetLinkToTargetTask (global::Ultramarine.Generators.Language.Task connectedTaskInstance)
		{
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.ConnectedWith> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.ConnectedWith>(connectedTaskInstance, global::Ultramarine.Generators.Language.ConnectedWith.ConnectedTaskDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConnectedTask not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetTask link accessor
		/// <summary>
		/// Get the list of ConnectedWith links to a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ultramarine.Generators.Language.ConnectedWith> GetLinksToConnectedTasked ( global::Ultramarine.Generators.Language.Task targetTaskInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.ConnectedWith>(targetTaskInstance, global::Ultramarine.Generators.Language.ConnectedWith.TargetTaskDomainRoleId);
		}
		#endregion
		#region ConnectedWith instance accessors
		
		/// <summary>
		/// Get any ConnectedWith links between a given Task and a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ultramarine.Generators.Language.ConnectedWith> GetLinks( global::Ultramarine.Generators.Language.Task source, global::Ultramarine.Generators.Language.Task target )
		{
			global::System.Collections.Generic.List<global::Ultramarine.Generators.Language.ConnectedWith> outLinks = new global::System.Collections.Generic.List<global::Ultramarine.Generators.Language.ConnectedWith>();
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.ConnectedWith> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.ConnectedWith>(source, global::Ultramarine.Generators.Language.ConnectedWith.ConnectedTaskDomainRoleId);
			foreach ( global::Ultramarine.Generators.Language.ConnectedWith link in links )
			{
				if ( target.Equals(link.TargetTask) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConnectedWith link between a given Taskand a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ultramarine.Generators.Language.ConnectedWith GetLink( global::Ultramarine.Generators.Language.Task source, global::Ultramarine.Generators.Language.Task target )
		{
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.ConnectedWith> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.ConnectedWith>(source, global::Ultramarine.Generators.Language.ConnectedWith.ConnectedTaskDomainRoleId);
			foreach ( global::Ultramarine.Generators.Language.ConnectedWith link in links )
			{
				if ( target.Equals(link.TargetTask) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ultramarine.Generators.Language
{
	/// <summary>
	/// DomainRelationship GeneratorModelHasTasks
	/// Description for Ultramarine.Generators.Language.GeneratorModelHasTasks
	/// </summary>
	[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.GeneratorModelHasTasks.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ultramarine.Generators.Language.GeneratorModelHasTasks.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0b9a8be5-4293-4fd4-ab23-9b0d87cd9ab0")]
	public partial class GeneratorModelHasTasks : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GeneratorModelHasTasks domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0b9a8be5, 0x4293, 0x4fd4, 0xab, 0x23, 0x9b, 0x0d, 0x87, 0xcd, 0x9a, 0xb0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GeneratorModelHasTasks link in the same Partition as the given GeneratorModel
		/// </summary>
		/// <param name="source">GeneratorModel to use as the source of the relationship.</param>
		/// <param name="target">Task to use as the target of the relationship.</param>
		public GeneratorModelHasTasks(GeneratorModel source, Task target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GeneratorModelHasTasks.GeneratorModelDomainRoleId, source), new DslModeling::RoleAssignment(GeneratorModelHasTasks.TaskDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GeneratorModelHasTasks(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GeneratorModelHasTasks(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GeneratorModelHasTasks(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GeneratorModelHasTasks(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GeneratorModel domain role code
		
		/// <summary>
		/// GeneratorModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid GeneratorModelDomainRoleId = new global::System.Guid(0x67029348, 0x434b, 0x4181, 0x8d, 0x46, 0x27, 0x5a, 0xca, 0x3f, 0x81, 0x9c);
		
		/// <summary>
		/// DomainRole GeneratorModel
		/// Description for
		/// Ultramarine.Generators.Language.GeneratorModelHasTasks.GeneratorModel
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.GeneratorModelHasTasks/GeneratorModel.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.GeneratorModelHasTasks/GeneratorModel.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Tasks", PropertyDisplayNameKey="Ultramarine.Generators.Language.GeneratorModelHasTasks/GeneratorModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("67029348-434b-4181-8d46-275aca3f819c")]
		public virtual GeneratorModel GeneratorModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GeneratorModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, GeneratorModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GeneratorModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Generator of a Task
		/// <summary>
		/// Gets Generator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static GeneratorModel GetGenerator(Task element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TaskDomainRoleId) as GeneratorModel;
		}
		
		/// <summary>
		/// Sets Generator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGenerator(Task element, GeneratorModel newGeneratorModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TaskDomainRoleId, newGeneratorModel);
		}
		#endregion
		#region Task domain role code
		
		/// <summary>
		/// Task domain role Id.
		/// </summary>
		public static readonly global::System.Guid TaskDomainRoleId = new global::System.Guid(0xf0d4bbec, 0xa402, 0x4af6, 0xa1, 0xe9, 0x26, 0x94, 0xd6, 0xe9, 0x8a, 0xe4);
		
		/// <summary>
		/// DomainRole Task
		/// Description for Ultramarine.Generators.Language.GeneratorModelHasTasks.Task
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.GeneratorModelHasTasks/Task.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.GeneratorModelHasTasks/Task.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Generator", PropertyDisplayNameKey="Ultramarine.Generators.Language.GeneratorModelHasTasks/Task.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f0d4bbec-a402-4af6-a1e9-2694d6e98ae4")]
		public virtual Task Task
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Task)DslModeling::DomainRoleInfo.GetRolePlayer(this, TaskDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TaskDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tasks of a GeneratorModel
		/// <summary>
		/// Gets a list of Tasks.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Task> GetTasks(GeneratorModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Task>, Task>(element, GeneratorModelDomainRoleId);
		}
		#endregion
		#region GeneratorModel link accessor
		/// <summary>
		/// Get the list of GeneratorModelHasTasks links to a GeneratorModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ultramarine.Generators.Language.GeneratorModelHasTasks> GetLinksToTasks ( global::Ultramarine.Generators.Language.GeneratorModel generatorModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.GeneratorModelHasTasks>(generatorModelInstance, global::Ultramarine.Generators.Language.GeneratorModelHasTasks.GeneratorModelDomainRoleId);
		}
		#endregion
		#region Task link accessor
		/// <summary>
		/// Get the GeneratorModelHasTasks link to a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ultramarine.Generators.Language.GeneratorModelHasTasks GetLinkToGenerator (global::Ultramarine.Generators.Language.Task taskInstance)
		{
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.GeneratorModelHasTasks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.GeneratorModelHasTasks>(taskInstance, global::Ultramarine.Generators.Language.GeneratorModelHasTasks.TaskDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Task not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GeneratorModelHasTasks instance accessors
		
		/// <summary>
		/// Get any GeneratorModelHasTasks links between a given GeneratorModel and a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ultramarine.Generators.Language.GeneratorModelHasTasks> GetLinks( global::Ultramarine.Generators.Language.GeneratorModel source, global::Ultramarine.Generators.Language.Task target )
		{
			global::System.Collections.Generic.List<global::Ultramarine.Generators.Language.GeneratorModelHasTasks> outLinks = new global::System.Collections.Generic.List<global::Ultramarine.Generators.Language.GeneratorModelHasTasks>();
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.GeneratorModelHasTasks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.GeneratorModelHasTasks>(source, global::Ultramarine.Generators.Language.GeneratorModelHasTasks.GeneratorModelDomainRoleId);
			foreach ( global::Ultramarine.Generators.Language.GeneratorModelHasTasks link in links )
			{
				if ( target.Equals(link.Task) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GeneratorModelHasTasks link between a given GeneratorModeland a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ultramarine.Generators.Language.GeneratorModelHasTasks GetLink( global::Ultramarine.Generators.Language.GeneratorModel source, global::Ultramarine.Generators.Language.Task target )
		{
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.GeneratorModelHasTasks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.GeneratorModelHasTasks>(source, global::Ultramarine.Generators.Language.GeneratorModelHasTasks.GeneratorModelDomainRoleId);
			foreach ( global::Ultramarine.Generators.Language.GeneratorModelHasTasks link in links )
			{
				if ( target.Equals(link.Task) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ultramarine.Generators.Language
{
	/// <summary>
	/// DomainRelationship ChildTasks
	/// Description for Ultramarine.Generators.Language.ChildTasks
	/// </summary>
	[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.ChildTasks.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ultramarine.Generators.Language.ChildTasks.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0ae4d88d-d086-4dbd-9ef8-bb70cff9b8d9")]
	public partial class ChildTasks : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ChildTasks domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0ae4d88d, 0xd086, 0x4dbd, 0x9e, 0xf8, 0xbb, 0x70, 0xcf, 0xf9, 0xb8, 0xd9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ChildTasks link in the same Partition as the given CompositeTask
		/// </summary>
		/// <param name="source">CompositeTask to use as the source of the relationship.</param>
		/// <param name="target">Task to use as the target of the relationship.</param>
		public ChildTasks(CompositeTask source, Task target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ChildTasks.CompositeTaskDomainRoleId, source), new DslModeling::RoleAssignment(ChildTasks.TaskDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ChildTasks(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ChildTasks(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ChildTasks(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ChildTasks(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CompositeTask domain role code
		
		/// <summary>
		/// CompositeTask domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompositeTaskDomainRoleId = new global::System.Guid(0x7d858091, 0x54ed, 0x4846, 0xb5, 0xa0, 0x31, 0xb8, 0x7d, 0x00, 0x1b, 0xd7);
		
		/// <summary>
		/// DomainRole CompositeTask
		/// Description for Ultramarine.Generators.Language.ChildTasks.CompositeTask
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.ChildTasks/CompositeTask.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.ChildTasks/CompositeTask.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Tasks", PropertyDisplayNameKey="Ultramarine.Generators.Language.ChildTasks/CompositeTask.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7d858091-54ed-4846-b5a0-31b87d001bd7")]
		public virtual CompositeTask CompositeTask
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CompositeTask)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompositeTaskDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompositeTaskDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a Task
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CompositeTask GetParent(Task element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TaskDomainRoleId) as CompositeTask;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(Task element, CompositeTask newCompositeTask)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TaskDomainRoleId, newCompositeTask);
		}
		#endregion
		#region Task domain role code
		
		/// <summary>
		/// Task domain role Id.
		/// </summary>
		public static readonly global::System.Guid TaskDomainRoleId = new global::System.Guid(0x6f1c3c60, 0x10b8, 0x40a1, 0xb6, 0xd2, 0x3f, 0x1f, 0xe7, 0xb5, 0xca, 0x6b);
		
		/// <summary>
		/// DomainRole Task
		/// Description for Ultramarine.Generators.Language.ChildTasks.Task
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.ChildTasks/Task.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.ChildTasks/Task.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="Ultramarine.Generators.Language.ChildTasks/Task.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6f1c3c60-10b8-40a1-b6d2-3f1fe7b5ca6b")]
		public virtual Task Task
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Task)DslModeling::DomainRoleInfo.GetRolePlayer(this, TaskDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TaskDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tasks of a CompositeTask
		/// <summary>
		/// Gets a list of Tasks.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Task> GetTasks(CompositeTask element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Task>, Task>(element, CompositeTaskDomainRoleId);
		}
		#endregion
		#region CompositeTask link accessor
		/// <summary>
		/// Get the list of ChildTasks links to a CompositeTask.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ultramarine.Generators.Language.ChildTasks> GetLinksToTasks ( global::Ultramarine.Generators.Language.CompositeTask compositeTaskInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.ChildTasks>(compositeTaskInstance, global::Ultramarine.Generators.Language.ChildTasks.CompositeTaskDomainRoleId);
		}
		#endregion
		#region Task link accessor
		/// <summary>
		/// Get the ChildTasks link to a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ultramarine.Generators.Language.ChildTasks GetLinkToParent (global::Ultramarine.Generators.Language.Task taskInstance)
		{
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.ChildTasks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.ChildTasks>(taskInstance, global::Ultramarine.Generators.Language.ChildTasks.TaskDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Task not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ChildTasks instance accessors
		
		/// <summary>
		/// Get any ChildTasks links between a given CompositeTask and a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ultramarine.Generators.Language.ChildTasks> GetLinks( global::Ultramarine.Generators.Language.CompositeTask source, global::Ultramarine.Generators.Language.Task target )
		{
			global::System.Collections.Generic.List<global::Ultramarine.Generators.Language.ChildTasks> outLinks = new global::System.Collections.Generic.List<global::Ultramarine.Generators.Language.ChildTasks>();
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.ChildTasks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.ChildTasks>(source, global::Ultramarine.Generators.Language.ChildTasks.CompositeTaskDomainRoleId);
			foreach ( global::Ultramarine.Generators.Language.ChildTasks link in links )
			{
				if ( target.Equals(link.Task) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ChildTasks link between a given CompositeTaskand a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ultramarine.Generators.Language.ChildTasks GetLink( global::Ultramarine.Generators.Language.CompositeTask source, global::Ultramarine.Generators.Language.Task target )
		{
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.ChildTasks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.ChildTasks>(source, global::Ultramarine.Generators.Language.ChildTasks.CompositeTaskDomainRoleId);
			foreach ( global::Ultramarine.Generators.Language.ChildTasks link in links )
			{
				if ( target.Equals(link.Task) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
