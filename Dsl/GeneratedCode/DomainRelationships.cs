//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Ultramarine.Generators.Language
{
	/// <summary>
	/// DomainRelationship Connection
	/// Description for Ultramarine.Generators.Language.Connection
	/// </summary>
	[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.Connection.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ultramarine.Generators.Language.Connection.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("190a9443-8fc2-4c0d-9f96-284b404f4f02")]
	public partial class Connection : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Connection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x190a9443, 0x8fc2, 0x4c0d, 0x9f, 0x96, 0x28, 0x4b, 0x40, 0x4f, 0x4f, 0x02);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Connection link in the same Partition as the given Task
		/// </summary>
		/// <param name="source">Task to use as the source of the relationship.</param>
		/// <param name="target">Task to use as the target of the relationship.</param>
		public Connection(Task source, Task target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Connection.ConnectedTaskDomainRoleId, source), new DslModeling::RoleAssignment(Connection.TargetTaskDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Connection(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Connection(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Connection(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Connection(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConnectedTask domain role code
		
		/// <summary>
		/// ConnectedTask domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConnectedTaskDomainRoleId = new global::System.Guid(0x612cd04d, 0x891f, 0x4238, 0x85, 0x3a, 0x42, 0xd3, 0x04, 0x3d, 0x29, 0x50);
		
		/// <summary>
		/// DomainRole ConnectedTask
		/// Description for Ultramarine.Generators.Language.Connection.ConnectedTask
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.Connection/ConnectedTask.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.Connection/ConnectedTask.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConnectedWith", PropertyDisplayNameKey="Ultramarine.Generators.Language.Connection/ConnectedTask.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("612cd04d-891f-4238-853a-42d3043d2950")]
		public virtual Task ConnectedTask
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Task)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConnectedTaskDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConnectedTaskDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConnectedTasked of a Task
		/// <summary>
		/// Gets a list of ConnectedTasked.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Task> GetConnectedTasked(Task element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Task>, Task>(element, TargetTaskDomainRoleId);
		}
		#endregion
		#region TargetTask domain role code
		
		/// <summary>
		/// TargetTask domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetTaskDomainRoleId = new global::System.Guid(0xaac64dbc, 0xd054, 0x4374, 0x8d, 0x09, 0xcf, 0x14, 0x3b, 0xa2, 0x01, 0x7b);
		
		/// <summary>
		/// DomainRole TargetTask
		/// Description for Ultramarine.Generators.Language.Connection.TargetTask
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.Connection/TargetTask.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.Connection/TargetTask.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConnectedTasked", PropertyDisplayNameKey="Ultramarine.Generators.Language.Connection/TargetTask.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("aac64dbc-d054-4374-8d09-cf143ba2017b")]
		public virtual Task TargetTask
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Task)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetTaskDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetTaskDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConnectedWith of a Task
		/// <summary>
		/// Gets ConnectedWith.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Task GetConnectedWith(Task element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConnectedTaskDomainRoleId) as Task;
		}
		
		/// <summary>
		/// Sets ConnectedWith.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConnectedWith(Task element, Task newTargetTask)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConnectedTaskDomainRoleId, newTargetTask);
		}
		#endregion
		#region ConnectedTask link accessor
		/// <summary>
		/// Get the Connection link to a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ultramarine.Generators.Language.Connection GetLinkToConnectedWith (global::Ultramarine.Generators.Language.Task connectedTaskInstance)
		{
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.Connection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.Connection>(connectedTaskInstance, global::Ultramarine.Generators.Language.Connection.ConnectedTaskDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConnectedTask not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetTask link accessor
		/// <summary>
		/// Get the list of Connection links to a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ultramarine.Generators.Language.Connection> GetLinksToConnectedTasked ( global::Ultramarine.Generators.Language.Task targetTaskInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.Connection>(targetTaskInstance, global::Ultramarine.Generators.Language.Connection.TargetTaskDomainRoleId);
		}
		#endregion
		#region Connection instance accessors
		
		/// <summary>
		/// Get any Connection links between a given Task and a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ultramarine.Generators.Language.Connection> GetLinks( global::Ultramarine.Generators.Language.Task source, global::Ultramarine.Generators.Language.Task target )
		{
			global::System.Collections.Generic.List<global::Ultramarine.Generators.Language.Connection> outLinks = new global::System.Collections.Generic.List<global::Ultramarine.Generators.Language.Connection>();
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.Connection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.Connection>(source, global::Ultramarine.Generators.Language.Connection.ConnectedTaskDomainRoleId);
			foreach ( global::Ultramarine.Generators.Language.Connection link in links )
			{
				if ( target.Equals(link.TargetTask) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Connection link between a given Taskand a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ultramarine.Generators.Language.Connection GetLink( global::Ultramarine.Generators.Language.Task source, global::Ultramarine.Generators.Language.Task target )
		{
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.Connection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.Connection>(source, global::Ultramarine.Generators.Language.Connection.ConnectedTaskDomainRoleId);
			foreach ( global::Ultramarine.Generators.Language.Connection link in links )
			{
				if ( target.Equals(link.TargetTask) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ultramarine.Generators.Language
{
	/// <summary>
	/// DomainRelationship Children
	/// Description for Ultramarine.Generators.Language.Children
	/// </summary>
	[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.Children.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ultramarine.Generators.Language.Children.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("11653440-f9a0-4749-a4d5-f01ac7ba4a7b")]
	public partial class Children : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Children domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x11653440, 0xf9a0, 0x4749, 0xa4, 0xd5, 0xf0, 0x1a, 0xc7, 0xba, 0x4a, 0x7b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Children link in the same Partition as the given CompositeTask
		/// </summary>
		/// <param name="source">CompositeTask to use as the source of the relationship.</param>
		/// <param name="target">Task to use as the target of the relationship.</param>
		public Children(CompositeTask source, Task target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Children.CompositeTaskDomainRoleId, source), new DslModeling::RoleAssignment(Children.TaskDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Children(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Children(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Children(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Children(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CompositeTask domain role code
		
		/// <summary>
		/// CompositeTask domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompositeTaskDomainRoleId = new global::System.Guid(0xc9435b94, 0x9cb4, 0x48f4, 0xaf, 0xc9, 0x09, 0x44, 0x20, 0x1b, 0xaa, 0x28);
		
		/// <summary>
		/// DomainRole CompositeTask
		/// Description for Ultramarine.Generators.Language.Children.CompositeTask
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.Children/CompositeTask.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.Children/CompositeTask.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Tasks", PropertyDisplayNameKey="Ultramarine.Generators.Language.Children/CompositeTask.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c9435b94-9cb4-48f4-afc9-0944201baa28")]
		public virtual CompositeTask CompositeTask
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CompositeTask)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompositeTaskDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompositeTaskDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a Task
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CompositeTask GetParent(Task element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TaskDomainRoleId) as CompositeTask;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(Task element, CompositeTask newCompositeTask)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TaskDomainRoleId, newCompositeTask);
		}
		#endregion
		#region Task domain role code
		
		/// <summary>
		/// Task domain role Id.
		/// </summary>
		public static readonly global::System.Guid TaskDomainRoleId = new global::System.Guid(0x5b59018b, 0x041e, 0x4314, 0x85, 0xbc, 0xfa, 0x5f, 0x28, 0x38, 0xfc, 0xf2);
		
		/// <summary>
		/// DomainRole Task
		/// Description for Ultramarine.Generators.Language.Children.Task
		/// </summary>
		[DslDesign::DisplayNameResource("Ultramarine.Generators.Language.Children/Task.DisplayName", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ultramarine.Generators.Language.Children/Task.Description", typeof(global::Ultramarine.Generators.Language.GeneratorLanguageDomainModel), "Ultramarine.Generators.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="Ultramarine.Generators.Language.Children/Task.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5b59018b-041e-4314-85bc-fa5f2838fcf2")]
		public virtual Task Task
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Task)DslModeling::DomainRoleInfo.GetRolePlayer(this, TaskDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TaskDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tasks of a CompositeTask
		/// <summary>
		/// Gets a list of Tasks.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Task> GetTasks(CompositeTask element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Task>, Task>(element, CompositeTaskDomainRoleId);
		}
		#endregion
		#region CompositeTask link accessor
		/// <summary>
		/// Get the list of Children links to a CompositeTask.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ultramarine.Generators.Language.Children> GetLinksToTasks ( global::Ultramarine.Generators.Language.CompositeTask compositeTaskInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.Children>(compositeTaskInstance, global::Ultramarine.Generators.Language.Children.CompositeTaskDomainRoleId);
		}
		#endregion
		#region Task link accessor
		/// <summary>
		/// Get the Children link to a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ultramarine.Generators.Language.Children GetLinkToParent (global::Ultramarine.Generators.Language.Task taskInstance)
		{
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.Children> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.Children>(taskInstance, global::Ultramarine.Generators.Language.Children.TaskDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Task not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Children instance accessors
		
		/// <summary>
		/// Get any Children links between a given CompositeTask and a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ultramarine.Generators.Language.Children> GetLinks( global::Ultramarine.Generators.Language.CompositeTask source, global::Ultramarine.Generators.Language.Task target )
		{
			global::System.Collections.Generic.List<global::Ultramarine.Generators.Language.Children> outLinks = new global::System.Collections.Generic.List<global::Ultramarine.Generators.Language.Children>();
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.Children> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.Children>(source, global::Ultramarine.Generators.Language.Children.CompositeTaskDomainRoleId);
			foreach ( global::Ultramarine.Generators.Language.Children link in links )
			{
				if ( target.Equals(link.Task) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Children link between a given CompositeTaskand a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ultramarine.Generators.Language.Children GetLink( global::Ultramarine.Generators.Language.CompositeTask source, global::Ultramarine.Generators.Language.Task target )
		{
			global::System.Collections.Generic.IList<global::Ultramarine.Generators.Language.Children> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ultramarine.Generators.Language.Children>(source, global::Ultramarine.Generators.Language.Children.CompositeTaskDomainRoleId);
			foreach ( global::Ultramarine.Generators.Language.Children link in links )
			{
				if ( target.Equals(link.Task) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
